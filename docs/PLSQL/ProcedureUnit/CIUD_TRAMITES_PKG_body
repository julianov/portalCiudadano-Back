create or replace PACKAGE BODY          CIUD_TRAMITES_PKG AS


-- PROCEDIMIENTO GENÉRICO PARA INSERTAR UNA FILA EN TABLA (NOMBRE DE TABLA SE PASA COMO PARÁMETRO). 
FUNCTION INSERTAR_FILA (p_table_name IN VARCHAR2, p_columns IN VARCHAR2, p_values IN VARCHAR2)
RETURN BOOLEAN
AS
BEGIN
  EXECUTE IMMEDIATE 'INSERT INTO ' || p_table_name || ' (' || p_columns || ') VALUES (' || p_values || ')';
  RETURN TRUE;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;


FUNCTION OBTENER_ULTIMO_ID(p_table_name IN VARCHAR2) RETURN NUMBER
AS
  l_last_id NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'SELECT MAX(ID) FROM ' || p_table_name INTO l_last_id;
  RETURN l_last_id;
EXCEPTION
  WHEN OTHERS THEN
    RETURN NULL;
END;

-----------------------------------------FUNCIONES DE TRÁMITES Y FORMULARIOS----------------------------------------------------

FUNCTION OBTENER_LISTA_TRAMITES
RETURN CLOB
AS
     l_query      CLOB;
     l_result     CLOB;
     l_temp       SYS_REFCURSOR;
     l_row        PROCEDURE_UNITS%ROWTYPE;
BEGIN
    l_query := 'SELECT ID, TITLE, STATE, DESCRIPTION, FORMS, ATTACHMENTS, CITIZEN_LEVEL, SECRETARY, THEME, PRICE, ICON, URL_PROCEDURE, SYS_EXP_ID, C, CONTENT_ID, ORF_ID,  CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM PROCEDURE_UNITS';  
    OPEN l_temp FOR l_query;
    l_result := '[ ';
    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;
        l_result := l_result || '{"ID":' || l_row.ID || ',"TITLE":"' || l_row.TITLE || '","STATE":"' || l_row.STATE || '","DESCRIPTION":"' || l_row.DESCRIPTION || '","FORMS":"' || l_row.FORMS || '","ATTACHMENTS":"' || l_row.ATTACHMENTS || '","CITIZEN_LEVEL":"' || l_row.CITIZEN_LEVEL ||'","SECRETARY":"' || l_row.SECRETARY || '","THEME":"' || l_row.THEME || '","PRICE":"' || l_row.PRICE || '","ICON":"' || l_row.ICON || '","URL_PROCEDURE":"' || l_row.URL_PROCEDURE || '","SYS_EXP_ID":"' || l_row.SYS_EXP_ID ||'","C":"' || l_row.C || '","CONTENT_ID":"' || l_row.CONTENT_ID || '","ORF_ID":"' || l_row.ORF_ID || '","CREATED_AT":"' || l_row.CREATED_AT || '","UPDATED_AT":"' || l_row.UPDATED_AT || '","CREATED_BY":"' || l_row.CREATED_BY || '","UPDATED_BY":"' || l_row.UPDATED_BY ||'"},';
        END LOOP;
    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;
    l_result := RTRIM(l_result, ', ') || ' ]';
    RETURN l_result;
END;



FUNCTION OBTENER_TRAMITE_POR_ID (id IN NUMBER)
RETURN CLOB
AS
     l_query      CLOB;
     l_result     CLOB;
     l_temp       SYS_REFCURSOR;
     l_row        PROCEDURE_UNITS%ROWTYPE;
BEGIN
    l_query := 'SELECT ID, TITLE, STATE, DESCRIPTION, FORMS, ATTACHMENTS, CITIZEN_LEVEL, SECRETARY, THEME, PRICE, ICON, URL_PROCEDURE, SYS_EXP_ID, C, CONTENT_ID, ORF_ID,  CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM PROCEDURE_UNITS WHERE ID = :id';    
    OPEN l_temp FOR l_query USING id;
    l_result := '[ ';
    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;
        l_result := l_result || '{"ID":' || l_row.ID || ',"TITLE":"' || l_row.TITLE || '","STATE":"' || l_row.STATE || '","DESCRIPTION":"' || l_row.DESCRIPTION || '","FORMS":"' || l_row.FORMS || '","ATTACHMENTS":"' || l_row.ATTACHMENTS || '","CITIZEN_LEVEL":"' || l_row.CITIZEN_LEVEL ||'","SECRETARY":"' || l_row.SECRETARY || '","THEME":"' || l_row.THEME || '","PRICE":"' || l_row.PRICE || '","ICON":"' || l_row.ICON || '","URL_PROCEDURE":"' || l_row.URL_PROCEDURE || '","SYS_EXP_ID":"' || l_row.SYS_EXP_ID ||'","C":"' || l_row.C || '","CONTENT_ID":"' || l_row.CONTENT_ID || '","ORF_ID":"' || l_row.ORF_ID || '","CREATED_AT":"' || l_row.CREATED_AT || '","UPDATED_AT":"' || l_row.UPDATED_AT || '","CREATED_BY":"' || l_row.CREATED_BY || '","UPDATED_BY":"' || l_row.UPDATED_BY ||'"},';
        END LOOP;
    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;
    l_result := RTRIM(l_result, ', ') || ' ]';
    RETURN l_result;
END;

FUNCTION OBTENER_TRAMITE_POR_TITULO (titulo IN VARCHAR2)
RETURN CLOB
AS
     l_query      CLOB;
     l_result     CLOB;
     l_temp       SYS_REFCURSOR;
     l_row        PROCEDURE_UNITS%ROWTYPE;
BEGIN
l_query :=  'SELECT ID, TITLE, STATE, DESCRIPTION, FORMS, ATTACHMENTS, CITIZEN_LEVEL, SECRETARY, THEME, PRICE, ICON, URL_PROCEDURE, SYS_EXP_ID, C, CONTENT_ID, ORF_ID,  CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM PROCEDURE_UNITS WHERE TITLE = :titulo';    
    OPEN l_temp FOR l_query USING titulo;
    l_result := '[ ';
    
    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;
        
        -- Construir el objeto JSON para cada fila
        l_result := l_result || '{"ID":' || l_row.ID || ',"TITLE":"' || l_row.TITLE || '","STATE":"' || l_row.STATE || '","DESCRIPTION":"' || l_row.DESCRIPTION || '","FORMS":"' || l_row.FORMS || '","ATTACHMENTS":"' || l_row.ATTACHMENTS || '","CITIZEN_LEVEL":"' || l_row.CITIZEN_LEVEL ||'","SECRETARY":"' || l_row.SECRETARY || '","THEME":"' || l_row.THEME || '","PRICE":"' || l_row.PRICE || '","ICON":"' || l_row.ICON || '","URL_PROCEDURE":"' || l_row.URL_PROCEDURE || '","SYS_EXP_ID":"' || l_row.SYS_EXP_ID ||'","C":"' || l_row.C || '","CONTENT_ID":"' || l_row.CONTENT_ID || '","ORF_ID":"' || l_row.ORF_ID || '","CREATED_AT":"' || l_row.CREATED_AT || '","UPDATED_AT":"' || l_row.UPDATED_AT || '","CREATED_BY":"' || l_row.CREATED_BY || '","UPDATED_BY":"' || l_row.UPDATED_BY ||'"},';

    END LOOP;
    
    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;
    
    l_result := RTRIM(l_result, ', ') || ' ]';
    
    RETURN l_result;
END;



FUNCTION CREAR_TRAMITE( title IN VARCHAR2, state IN VARCHAR2, description IN VARCHAR2, secretary IN VARCHAR2, forms IN CLOB, theme IN VARCHAR2, attachments IN VARCHAR2, citizen_level IN VARCHAR2, price IN VARCHAR2, url IN VARCHAR2, icon IN VARCHAR2, sys_exp_id IN NUMBER, c IN VARCHAR2, contend_id IN VARCHAR2, orf_id IN NUMBER, created_by IN NUMBER)
RETURN BOOLEAN
AS
BEGIN
  EXECUTE IMMEDIATE 'INSERT INTO PROCEDURE_UNITS (TITLE, STATE, SECRETARY, DESCRIPTION, FORMS, THEME, ATTACHMENTS, CITIZEN_LEVEL, PRICE, URL_PROCEDURE, ICON, SYS_EXP_ID, C, CONTENT_ID, ORF_ID, CREATED_BY) VALUES
 (:title, :state, :description, :secretary, :forms, :theme, :attachments, :citizen_level, :price, :url, :icon, :sys_exp_id, :c, :contend_id, :orf_id, :created_by)'
    USING title, state, description, secretary, forms, theme, attachments, citizen_level, price, url, icon, sys_exp_id, c, contend_id, orf_id, created_by;

  RETURN TRUE;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;


 FUNCTION ACTUALIZAR_TRAMITE (
    id IN NUMBER,
    titulo IN VARCHAR2,
    tema IN VARCHAR2,
    formularios IN CLOB,
    descripcion IN VARCHAR2,
    estado IN VARCHAR2,
    attachments IN CLOB, 
    ciudadano_nivel IN VARCHAR2,
    modificadoPor IN NUMBER
) RETURN BOOLEAN
IS
    v_success BOOLEAN := FALSE;
BEGIN
    UPDATE PROCEDURE_UNITS SET
        TITLE = ACTUALIZAR_TRAMITE.titulo,
        THEME = ACTUALIZAR_TRAMITE.tema,
        FORMS = ACTUALIZAR_TRAMITE.formularios,
        DESCRIPTION = ACTUALIZAR_TRAMITE.descripcion,
        STATE = ACTUALIZAR_TRAMITE.estado,
        ATTACHMENTS = ACTUALIZAR_TRAMITE.attachments, 
        CITIZEN_LEVEL = ACTUALIZAR_TRAMITE.ciudadano_nivel,
        UPDATED_BY = ACTUALIZAR_TRAMITE.modificadoPor
    WHERE ID = ACTUALIZAR_TRAMITE.id;

    IF SQL%ROWCOUNT = 1 THEN
        v_success := TRUE;
    END IF;

    RETURN v_success;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END;


FUNCTION ELIMINAR_TRAMITE_POR_TITULO (titulo IN VARCHAR2)
RETURN BOOLEAN
AS
BEGIN
  EXECUTE IMMEDIATE 'DELETE FROM PROCEDURE_UNITS WHERE TITLE = :titulo' USING titulo;

  IF SQL%ROWCOUNT > 0 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;

FUNCTION ELIMINAR_TRAMITE_POR_ID (id IN NUMBER)
RETURN BOOLEAN
AS
BEGIN
  EXECUTE IMMEDIATE 'DELETE FROM PROCEDURE_UNITS WHERE ID = :id' USING id;

  IF SQL%ROWCOUNT > 0 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;


FUNCTION TEMATICAS_TRAMITES RETURN VARCHAR2 IS
  l_cursor SYS_REFCURSOR;
  l_result VARCHAR2(32767) := '[';
  l_separator VARCHAR2(10) := ', ';
  l_column1 NUMBER;
  l_column2 VARCHAR2(100);
BEGIN
  -- Llamada al procedimiento para llenar el cursor
  INTERNET.CIUDADANO_PKG.CIU_CATEGORIAS_BUSCA(NULL, l_cursor);

  -- Procesar el cursor y construir la cadena JSON
  LOOP
    FETCH l_cursor INTO l_column1, l_column2;
    EXIT WHEN l_cursor%NOTFOUND;
    
    -- Concatenar los valores de las columnas a la cadena JSON
    l_result := l_result || '{"ID":"' || l_column1 || '","Descripción":"' || l_column2 || '"}' || l_separator;
  END LOOP;

  -- Cerrar el cursor
  CLOSE l_cursor;

  -- Eliminar el separador al final de la cadena JSON
  IF LENGTH(l_result) > LENGTH(l_separator) THEN
    l_result := SUBSTR(l_result, 1, LENGTH(l_result) - LENGTH(l_separator));
  END IF;

  -- Agregar el corchete de cierre al final de la cadena JSON
  l_result := l_result || ']';

  -- Devolver la cadena JSON como VARCHAR2
  RETURN l_result;
END;



FUNCTION TRAMITES_BUSCA_WEB RETURN CLOB IS
  l_cursor SYS_REFCURSOR;
  l_result CLOB := '[';
  l_separator VARCHAR2(10) := ', ';
  l_column1 NUMBER;
  l_column2 VARCHAR2(1024);
  l_column3 CLOB;
  l_column4 VARCHAR2(1024);
  l_column5 VARCHAR2(1024);
  l_column6 VARCHAR2(1024);
  l_column7 VARCHAR2(1024);  -- Corregir el tipo de dato si es diferente
  l_column8 VARCHAR2(1024);
  l_column9 VARCHAR2(1024);
  l_column10 VARCHAR2(1024);
  l_column11 VARCHAR2(1024);

BEGIN
  -- Llamada al procedimiento para llenar el cursor
  INTERNET.CIUDADANO_PKG.CIU_TRAMITES_BUSCA_WEB(l_cursor);

  -- Procesar el cursor y construir la cadena JSON
  LOOP
    FETCH l_cursor INTO l_column1, l_column2, l_column3, l_column4, l_column5, l_column6, l_column7, l_column8, l_column9, l_column10, l_column11;
    EXIT WHEN l_cursor%NOTFOUND;

    -- Eliminar comillas dobles del texto en l_column3
    l_column3 := REPLACE(l_column3, '"', '\"');

    -- Concatenar los valores de las columnas a la cadena JSON
    l_result := l_result || '{"ID":"' || l_column1 || '","Título":"' || l_column2 ||'","Texto":"' || l_column3 ||'","Costo":"' || l_column4 || '","C":"' || l_column5 || '","Contenido_ID":"' || l_column6 || '","ORF_ID":"' || l_column7 || '","Organismo":"' || l_column8 || '","URL_TRAMITE":"' || l_column9 ||'","Categoria":"' || l_column10 ||'","Icono":"' || l_column11 || '"}' ||  l_separator;
    END LOOP;

  -- Cerrar el cursor
  CLOSE l_cursor;

  -- Eliminar el separador al final de la cadena JSON si no es el último objeto
  IF l_result != '[' THEN
    l_result := SUBSTR(l_result, 1, LENGTH(l_result) - LENGTH(l_separator));
  END IF;

  -- Agregar el corchete de cierre al final de la cadena JSON
  l_result := l_result || ']';

  -- Devolver la cadena JSON como CLOB
  RETURN l_result;
END;

--------------------------------------------------------------------------------------------------------------------


FUNCTION OBTENER_LISTA_FORMULARIOS
RETURN CLOB
AS
     l_query      CLOB;
     l_result     CLOB;
     l_temp       SYS_REFCURSOR;
     l_row        FORMS_UNITS%ROWTYPE;
BEGIN
    l_query := 'SELECT CODE, TITLE, SUBTITLE, DESCRIPTION, KEYWORDS, ELEMENTS, STATUS, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY  FROM FORMS_UNITS';    
    OPEN l_temp FOR l_query;
    l_result := '[ ';
    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;
        l_result := l_result || '{ "CODE": "' || l_row.CODE || '", "TITLE": "' || l_row.TITLE || '", "SUBTITLE": "' || l_row.SUBTITLE || '", "DESCRIPTION": "' || l_row.DESCRIPTION || '", "KEYWORDS": "' || l_row.KEYWORDS || '", "ELEMENTS": "' || l_row.ELEMENTS || '", "STATUS": "' || l_row.STATUS || '", "CREATED_AT": "' || l_row.CREATED_AT || '", "UPDATED_AT": "' || l_row.UPDATED_AT || '", "CREATED_BY": "' || l_row.CREATED_BY || '", "UPDATED_BY": "' || l_row.UPDATED_BY || '" }, ';
    END LOOP;
    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;
    l_result := RTRIM(l_result, ', ') || ' ]';

    RETURN l_result;
END;



FUNCTION OBTENER_LISTA_FORM_PUBLICADOS
RETURN CLOB
AS
     l_query      CLOB;
     l_result     CLOB;
     l_temp       SYS_REFCURSOR;
     l_row        FORMS_UNITS%ROWTYPE;
BEGIN
    l_query := 'SELECT CODE, TITLE, SUBTITLE, DESCRIPTION, KEYWORDS, ELEMENTS, STATUS, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY  FROM FORMS_UNITS WHERE STATUS = ''Publicado'' ';    
    OPEN l_temp FOR l_query;
    l_result := '[ ';
    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;
        l_result := l_result || '{ "CODE": "' || l_row.CODE || '", "TITLE": "' || l_row.TITLE || '", "SUBTITLE": "' || l_row.SUBTITLE || '", "DESCRIPTION": "' || l_row.DESCRIPTION || '", "KEYWORDS": "' || l_row.KEYWORDS || '", "ELEMENTS": "' || l_row.ELEMENTS || '", "STATUS": "' || l_row.STATUS || '", "CREATED_AT": "' || l_row.CREATED_AT || '", "UPDATED_AT": "' || l_row.UPDATED_AT || '", "CREATED_BY": "' || l_row.CREATED_BY || '", "UPDATED_BY": "' || l_row.UPDATED_BY || '" }, ';
    END LOOP;
    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;
    l_result := RTRIM(l_result, ', ') || ' ]';

    RETURN l_result;
END;


FUNCTION OBTENER_FORMULARIO_POR_PK (code IN VARCHAR2)
RETURN CLOB
AS
     l_query      CLOB;
     l_result     CLOB;
     l_temp       SYS_REFCURSOR;
     l_row        FORMS_UNITS%ROWTYPE;
BEGIN
    l_query := 'SELECT CODE, TITLE, SUBTITLE, DESCRIPTION, KEYWORDS, ELEMENTS, STATUS, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM FORMS_UNITS WHERE CODE = :code';
    OPEN l_temp FOR l_query USING code;
    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;
        l_result := l_result || '[{"CODE":"' || l_row.CODE || '","TITLE":"' || l_row.TITLE || '","SUBTITLE":"' || l_row.SUBTITLE || '","DESCRIPTION":"' || l_row.DESCRIPTION ||'","KEYWORDS":"' || l_row.KEYWORDS || '","ELEMENTS":"' || l_row.ELEMENTS || '","STATUS":"' || l_row.STATUS || '","CREATED_AT":"' || l_row.CREATED_AT || '","UPDATED_AT":"' || l_row.UPDATED_AT || '","CREATED_BY":"' || l_row.CREATED_BY || '","UPDATED_BY":"' || l_row.UPDATED_BY ||'"}]';
    END LOOP;
    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;
    RETURN l_result;
END;


FUNCTION OBTENER_FORMULARIO_POR_TITULO (titulo IN VARCHAR2)
RETURN CLOB
AS
     l_query      CLOB;
     l_result     CLOB;
     l_temp       SYS_REFCURSOR;
     l_row        FORMS_UNITS%ROWTYPE;
BEGIN
    l_query := 'SELECT CODE, TITLE, SUBTITLE, DESCRIPTION, KEYWORDS, ELEMENTS, STATUS, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM FORMS_UNITS WHERE TITLE = :titulo';

    OPEN l_temp FOR l_query USING titulo;
    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;
        l_result := l_result || '[{"CODE":"' || l_row.CODE || '","TITLE":"' || l_row.TITLE || '","SUBTITLE":"' || l_row.SUBTITLE || '","DESCRIPTION":"' || l_row.DESCRIPTION ||'","KEYWORDS":"' || l_row.KEYWORDS || '","ELEMENTS":"' || l_row.ELEMENTS || '","STATUS":"' || l_row.STATUS || '","CREATED_AT":"' || l_row.CREATED_AT || '","UPDATED_AT":"' || l_row.UPDATED_AT || '","CREATED_BY":"' || l_row.CREATED_BY || '","UPDATED_BY":"' || l_row.UPDATED_BY ||'"}]';
    END LOOP;
    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;
    RETURN l_result;
END;


FUNCTION OBTENER_FORMULARIO_PUBLICADOS
RETURN CLOB
AS
    l_query   CLOB;
    l_result  CLOB;
    l_row     FORMS_UNITS%ROWTYPE;
BEGIN
    l_query := 'SELECT CODE, TITLE, SUBTITLE, DESCRIPTION, KEYWORDS, ELEMENTS, STATUS, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM FORMS_UNITS WHERE STATUS = ''Publicado''';

    FOR l_row IN (SELECT CODE, TITLE, SUBTITLE, DESCRIPTION, KEYWORDS, ELEMENTS, STATUS, CREATED_AT, UPDATED_AT, CREATED_BY, UPDATED_BY FROM FORMS_UNITS WHERE STATUS = 'PUBLICO')
    LOOP
        l_result := l_result || '{"CODE":' || l_row.CODE || '","TITLE":"' || l_row.TITLE || '","SUBTITLE":"' || l_row.SUBTITLE || '","DESCRIPTION":"' || l_row.DESCRIPTION || ',"KEYWORDS":"' || l_row.KEYWORDS ||'","ELEMENTS":"' || l_row.ELEMENTS || '","STATUS":"' || l_row.STATUS || '","CREATED_AT":"' || l_row.CREATED_AT || '","UPDATED_AT":"' || l_row.UPDATED_AT || '","CREATED_BY":"' || l_row.CREATED_BY || '","UPDATED_BY":"' || l_row.UPDATED_BY ||'"}';
    END LOOP;

    RETURN l_result;
END;


FUNCTION CREAR_FORMULARIO( code IN VARCHAR2, title IN VARCHAR2, subtitle IN VARCHAR2, description IN VARCHAR2, keywords IN VARCHAR2, elements IN VARCHAR2, status IN VARCHAR2, created_by IN NUMBER)
RETURN BOOLEAN
AS
BEGIN
  EXECUTE IMMEDIATE 'INSERT INTO FORMS_UNITS (CODE, TITLE, SUBTITLE, DESCRIPTION, KEYWORDS, ELEMENTS, STATUS, CREATED_BY) VALUES (:code, :title, :subtitle, :description, :keywords, :elements, :status, :created_by)'
    USING code, title, subtitle, description, keywords, elements, status, created_by;

  RETURN TRUE;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;


FUNCTION ELIMINAR_FORMULARIO_POR_PK(codigo IN VARCHAR2)
RETURN BOOLEAN
AS
BEGIN
  EXECUTE IMMEDIATE 'DELETE FROM FORMS_UNITS WHERE CODE = :codigo' USING codigo;

  IF SQL%ROWCOUNT > 0 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;

FUNCTION ELIMINAR_FORMULARIO_POR_TITULO(titulo IN VARCHAR2)
RETURN BOOLEAN
AS
BEGIN
  EXECUTE IMMEDIATE 'DELETE FROM FORMS_UNITS WHERE TITLE = :titulo' USING titulo;

  IF SQL%ROWCOUNT > 0 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;


 FUNCTION ACTUALIZAR_FORMULARIO (
    code IN VARCHAR2,
    titulo IN VARCHAR2,
    subtitulo IN VARCHAR2,
    descripcion IN VARCHAR2,
    estado IN VARCHAR2,
    modificadoPor IN NUMBER
) RETURN BOOLEAN
IS
    v_success BOOLEAN := FALSE;
BEGIN
    UPDATE FORMS_UNITS SET
        TITLE = ACTUALIZAR_FORMULARIO.titulo,
        SUBTITLE = ACTUALIZAR_FORMULARIO.subtitulo,
        DESCRIPTION = ACTUALIZAR_FORMULARIO.descripcion,
        STATUS = ACTUALIZAR_FORMULARIO.estado,
        UPDATED_BY = ACTUALIZAR_FORMULARIO.modificadoPor
    WHERE CODE = ACTUALIZAR_FORMULARIO.code;

    IF SQL%ROWCOUNT = 1 THEN
        v_success := TRUE;
    END IF;

    RETURN v_success;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END;


FUNCTION ACTUALIZAR_FORMULARIO_POR_PK(
  code IN VARCHAR2,
  title IN VARCHAR2,
  subtitle IN VARCHAR2,
  description IN VARCHAR2,
  keywords IN VARCHAR2,
  elements IN VARCHAR2,
  status IN VARCHAR2,
  updated_by IN NUMBER
) RETURN BOOLEAN
AS
BEGIN
  EXECUTE IMMEDIATE '
    UPDATE FORMS_UNITS
    SET
      TITLE = :title,
      SUBTITLE = :subtitle,
      DESCRIPTION = :description,
      KEYWORDS = :keywords,
      ELEMENTS = :elements,
      STATUS = :status,
      UPDATED_BY = :updated_by
    WHERE CODE = :code'
    USING title, subtitle, description, keywords, elements, status, updated_by, code;

  IF SQL%ROWCOUNT = 1 THEN
    RETURN TRUE;
  ELSE
    RETURN FALSE;
  END IF;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;

END CIUD_TRAMITES_PKG;