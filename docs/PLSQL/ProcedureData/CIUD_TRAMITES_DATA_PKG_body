create or replace PACKAGE BODY          CIUD_TRAMITES_DATA_PKG AS

-- obtener datos
/*
FUNCTION OBTENER_LISTA_FORM_DATA
RETURN CLOB
IS
    l_result CLOB;
    l_temp SYS_REFCURSOR;
    l_row FORMS_DATA%ROWTYPE;
BEGIN
    OPEN l_temp FOR 
        'SELECT ID, FORM_UNIT, PROCEDURE_DATA_ID, USER_ID, ELEMENTS, ATTACHMENTS, MULTIMEDIA_ID, STATUS, APPROVED_AT, CREATED_AT, UPDATED_AT FROM FORMS_DATA ORDER BY CREATED_AT';

    l_result := '[ ';

    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;

        l_result := l_result || '{"ID":' || l_row.ID || ', "FORM_UNIT":"' || l_row.FORM_UNIT || '", "PROCEDURE_DATA_ID":"' || l_row.PROCEDURE_DATA_ID || '", "USER_ID":' || l_row.USER_ID || ', "ELEMENTS":"' || l_row.ELEMENTS || '", "ATTACHMENTS":"' || l_row.ATTACHMENTS ||'", "MULTIMEDIA_ID":"' || l_row.MULTIMEDIA_ID || '", "STATUS":"' || l_row.STATUS || '", "APPROVED_AT":"' || l_row.APPROVED_AT || '", "CREATED_AT":"' || l_row.CREATED_AT || '", "UPDATED_AT":"' || l_row.UPDATED_AT || '"},';
    END LOOP;

    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;

    l_result := RTRIM(l_result, ', ') || ' ]';

    RETURN l_result;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró registros');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
END; */

FUNCTION OBTENER_LISTA_FORM_DATA(
    start_position IN NUMBER,
    end_position IN NUMBER
)
RETURN CLOB
IS
    l_result1 CLOB;
    l_result2 CLOB := '';  -- Inicializa l_result2 para almacenar registros individuales
    l_result3 CLOB;
    l_result_size NUMBER;
    l_count  NUMBER;
    l_row_check NUMBER := 0;
    l_json_record VARCHAR2(4000); -- Para almacenar el registro individual como JSON


    CURSOR c_forms_data IS
        SELECT 
            '{"ID":' || ID || ',"FORM_UNIT":"' || FORM_UNIT || '","PROCEDURE_DATA_ID":"' || PROCEDURE_DATA_ID || '","USER_ID":' || USER_ID || ',"ELEMENTS":"' || ELEMENTS || '","ATTACHMENTS":"' || ATTACHMENTS ||'","MULTIMEDIA_ID":"' || MULTIMEDIA_ID || '","STATUS":"' || STATUS || '","APPROVED_AT":"' || APPROVED_AT || '","CREATED_AT":"' || CREATED_AT || '","UPDATED_AT":"' || UPDATED_AT || '"}' as json_record
        FROM FORMS_DATA;

BEGIN
    SELECT COUNT(*) INTO l_count
    FROM FORMS_DATA;

    FOR r in c_forms_data LOOP
        IF l_row_check + 1 >= start_position AND l_row_check + 1 <= end_position THEN
            l_json_record := r.json_record;

            l_result_size := DBMS_LOB.GETLENGTH(l_result1 || l_result2 || l_json_record || '}');

            IF l_result_size > 10000 THEN
                EXIT;
            ELSE
                -- Agregar coma si no es el primer registro
                IF l_row_check != 0 THEN
                    l_result2 := l_result2 || ', ';
                END IF;
                l_result2 := l_result2 || l_json_record;
                l_row_check := l_row_check + 1;
            END IF;
        END IF;
    END LOOP;
    
    l_result1 := '{ "count": ' || TO_CHAR(l_count) ||  ',"rows": ' || TO_CHAR(l_row_check) || ', "data": [';  -- Cambiado para que la data esté entre corchetes

    l_result3 := l_result1 || l_result2 || ']}';

    RETURN l_result3;
END;


FUNCTION OBTENER_FORM_DATA_POR_CODIGO(p_form_unit IN VARCHAR2, p_user_id IN NUMBER) RETURN CLOB
IS
    l_result CLOB;
BEGIN
    SELECT '[' ||
           LISTAGG(
               '{"ID":' || ID || ', "FORM_UNIT":"' || FORM_UNIT || '", "PROCEDURE_DATA_ID":"' || PROCEDURE_DATA_ID || '", "USER_ID":' || USER_ID || ', "ATTACHMENTS":"' || ATTACHMENTS ||'", "MULTIMEDIA_ID":"' || MULTIMEDIA_ID || '", "STATUS":"' || STATUS || '", "APPROVED_AT":"' || APPROVED_AT || '", "CREATED_AT":"' || CREATED_AT || '", "UPDATED_AT":"' || UPDATED_AT || '"}',
               ', '
           ) WITHIN GROUP (ORDER BY ID) ||
           ']' INTO l_result
    FROM (
        SELECT 
            ID, FORM_UNIT, PROCEDURE_DATA_ID, USER_ID, ATTACHMENTS, MULTIMEDIA_ID, STATUS, APPROVED_AT, CREATED_AT, UPDATED_AT
        FROM FORMS_DATA
        WHERE FORM_UNIT = p_form_unit AND USER_ID = p_user_id
        ORDER BY ID DESC -- Ordenar por ID en orden descendente para obtener la última fila
    )
    WHERE ROWNUM = 1; -- Filtrar para obtener la primera fila (la última debido al orden)

    RETURN l_result;
END;


FUNCTION OBTENER_FORM_DATA_CODE(code IN FORMS_DATA.FORM_UNIT%TYPE) 
RETURN CLOB
IS
    l_result CLOB;
    l_temp SYS_REFCURSOR;
    l_row FORMS_DATA%ROWTYPE;
BEGIN
    OPEN l_temp FOR 
        'SELECT ID, FORM_UNIT, PROCEDURE_DATA_ID, USER_ID, ELEMENTS, ATTACHMENTS, MULTIMEDIA_ID, STATUS, APPROVED_AT, CREATED_AT, UPDATED_AT FROM FORMS_DATA WHERE CODE = :code' USING code;

    l_result := '[ ';

    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;

        l_result := l_result || '{"ID":' || l_row.ID || ', "FORM_UNIT":"' || l_row.FORM_UNIT || '", "PROCEDURE_DATA_ID":"' || l_row.PROCEDURE_DATA_ID || '", "USER_ID":' || l_row.USER_ID || ', "ELEMENTS":"' || l_row.ELEMENTS || '", "ATTACHMENTS":"' || l_row.ATTACHMENTS ||'", "MULTIMEDIA_ID":"' || l_row.MULTIMEDIA_ID || '", "STATUS":"' || l_row.STATUS || '", "APPROVED_AT":"' || l_row.APPROVED_AT || '", "CREATED_AT":"' || l_row.CREATED_AT || '", "UPDATED_AT":"' || l_row.UPDATED_AT || '"},';
    END LOOP;

    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;

    l_result := RTRIM(l_result, ', ') || ' ]';

    RETURN l_result;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró registro con CODE: ' || code);
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
END;


FUNCTION OBTENER_FORM_DATA_USER(p_user_id IN NUMBER) 
RETURN CLOB
AS
     l_result     CLOB;
BEGIN
    SELECT '[' ||
        LISTAGG('{ "ID": "' || ID || '", "FORM_UNIT": "' || FORM_UNIT || '", "PROCEDURE_DATA_ID": "' || PROCEDURE_DATA_ID || '", "USER_ID": "' || USER_ID || '", "ATTACHMENTS": "' || ATTACHMENTS || '", "MULTIMEDIA_ID": "' || MULTIMEDIA_ID ||'", "STATUS": "' || STATUS ||'", "APPROVED_AT": "' || APPROVED_AT ||'", "CREATED_AT": "' || CREATED_AT ||'", "UPDATED_AT": "' || UPDATED_AT ||'" }', ', ') WITHIN GROUP (ORDER BY ID) ||
           ']' INTO l_result
    FROM FORMS_DATA WHERE USER_ID = p_user_id;

    RETURN l_result;
END;


FUNCTION OBTENER_ULT_FORMDATA_USER(user_id IN NUMBER) 
RETURN CLOB
IS
    l_result CLOB;
    l_temp SYS_REFCURSOR;
    l_row FORMS_DATA%ROWTYPE;
BEGIN
    OPEN l_temp FOR 
        'SELECT ID, FORM_UNIT, PROCEDURE_DATA_ID, USER_ID, ELEMENTS, ATTACHMENTS, MULTIMEDIA_ID, STATUS, APPROVED_AT, CREATED_AT, UPDATED_AT FROM (SELECT * FROM FORMS_DATA WHERE USER_ID = ' || user_id || ' ORDER BY CREATED_AT DESC) WHERE ROWNUM = 1';

    l_result := '[ ';

    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;

        l_result := l_result || '{"ID":' || l_row.ID || ', "FORM_UNIT":"' || l_row.FORM_UNIT || '", "PROCEDURE_DATA_ID":"' || l_row.PROCEDURE_DATA_ID || '", "USER_ID":' || l_row.USER_ID || ', "ELEMENTS":"' || l_row.ELEMENTS || '", "ATTACHMENTS":"' || l_row.ATTACHMENTS ||'", "MULTIMEDIA_ID":"' || l_row.MULTIMEDIA_ID || '", "STATUS":"' || l_row.STATUS || '", "APPROVED_AT":"' || l_row.APPROVED_AT || '", "CREATED_AT":"' || l_row.CREATED_AT || '", "UPDATED_AT":"' || l_row.UPDATED_AT || '"},';
    END LOOP;

    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;

    l_result := RTRIM(l_result, ', ') || ' ]';

    RETURN l_result;

END;


FUNCTION OBTENER_FORM_DATA_ELEMENTS(codigo IN VARCHAR2, p_user_id IN VARCHAR)
RETURN CLOB
AS
     l_result     CLOB;
BEGIN
    SELECT 
            ELEMENTS
            INTO l_result
    FROM FORMS_DATA WHERE FORM_UNIT = codigo AND USER_ID = p_user_id AND ROWNUM = 1;

    RETURN l_result;
END;


FUNCTION OBTENER_FORMULARIO_POR_PK (codigo IN VARCHAR2)
RETURN CLOB
IS
    l_result CLOB;
BEGIN
    SELECT '[' || 
           '{ "CODE": "' || CODE || '", "TITLE": "' || TITLE || '", "SUBTITLE": "' || SUBTITLE || '", "DESCRIPTION": "' || DESCRIPTION || '", "KEYWORDS": "' || KEYWORDS || '", "STATUS": "' || STATUS || '", "CREATED_AT": "' || CREATED_AT || '" }' || 
           ']'
    INTO l_result
    FROM FORMS_UNITS
    WHERE CODE = codigo;

    RETURN l_result;
END;

--insertar datos en tabla

FUNCTION CREAR_FORMULARIO_DATA(
    p_form_unit IN VARCHAR2,
    p_procedure_data_id IN NUMBER,
    p_user_id IN FORMS_DATA.USER_ID%TYPE,
    p_elements IN FORMS_DATA.ELEMENTS%TYPE
) RETURN BOOLEAN
AS
    v_existing_forms PROCEDURE_DATA.FORMS%TYPE;
BEGIN
    INSERT INTO FORMS_DATA(FORM_UNIT, PROCEDURE_DATA_ID, USER_ID, ELEMENTS, STATUS)
    VALUES (p_form_unit, p_procedure_data_id, p_user_id, p_elements, 'PENDIENTE');
    
    -- Obtener el valor actual de FORMS en PROCEDURE_DATA
    SELECT FORMS INTO v_existing_forms
    FROM PROCEDURE_DATA
    WHERE ID = p_procedure_data_id;
    
    -- Actualizar el valor de FORMS en PROCEDURE_DATA
    IF v_existing_forms IS NULL THEN
        UPDATE PROCEDURE_DATA
        SET FORMS = p_form_unit
        WHERE ID = p_procedure_data_id;
    ELSE
        UPDATE PROCEDURE_DATA
        SET FORMS = v_existing_forms || ',' || p_form_unit
        WHERE ID = p_procedure_data_id;
    END IF;
    
    RETURN TRUE;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END;

----

--- actualizar datos

FUNCTION ACTUALIZAR_FORMULARIO_DATA(
    p_form_unit IN VARCHAR2,
    p_procedure_data_id IN NUMBER,
    p_user_id IN FORMS_DATA.USER_ID%TYPE,
    p_elements IN FORMS_DATA.ELEMENTS%TYPE
) RETURN BOOLEAN
IS
    v_success BOOLEAN := FALSE;
BEGIN
    UPDATE FORMS_DATA SET 
        ELEMENTS = p_elements
    WHERE FORM_UNIT = p_form_unit AND USER_ID = p_user_id ;
    IF SQL%ROWCOUNT = 1 THEN
        v_success := TRUE;
    END IF;

    RETURN v_success;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END;

--------------------------------- PROCEDURES ---------------------------------

--- obtener datos

/* FUNCTION OBTENER_LISTA_TRAM_DATA
RETURN CLOB
IS
    l_result CLOB;
    l_temp SYS_REFCURSOR;
    l_row PROCEDURE_DATA%ROWTYPE;
BEGIN
    OPEN l_temp FOR 
        'SELECT ID, USER_ID, ACTOR_ID, REASON, FORMS, ATTACHMENTS, MULTIMEDIA_ID, STATUS, DATE_APPROVED, CREATED_AT, UPDATED_AT FROM PROCEDURE_DATA ORDER BY CREATED_AT DESC';

    l_result := '[ ';

    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;

        l_result := l_result || '{"ID":' || l_row.ID || ', "USER_ID":' || l_row.USER_ID || ', "ACTOR_ID":"' || l_row.ACTOR_ID || '", "REASON":"' || l_row.REASON || '", "FORMS":"' || l_row.FORMS || '", "ATTACHMENTS":"' || l_row.ATTACHMENTS || '", "MULTIMEDIA_ID":"' || l_row.MULTIMEDIA_ID ||'", "STATUS":"' || l_row.STATUS || '", "DATE_APPROVED":"' || l_row.DATE_APPROVED || '", "CREATED_AT":"' || l_row.CREATED_AT || '", "UPDATED_AT":"' || l_row.UPDATED_AT || '"},';
    END LOOP;

    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;

    l_result := RTRIM(l_result, ', ') || ' ]';

    RETURN l_result;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('No se encontró registroS');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
END; */ 

FUNCTION OBTENER_LISTA_TRAM_DATA(
    start_position IN NUMBER,
    end_position IN NUMBER
)
RETURN CLOB
IS
    l_result1 CLOB;
    l_result2 CLOB := '';  -- Inicializa l_result2 para almacenar registros individuales
    l_result3 CLOB;
    l_result_size NUMBER;
    l_count  NUMBER;
    l_row_check NUMBER := 0;
    l_json_record VARCHAR2(4000); -- Para almacenar el registro individual como JSON

    CURSOR c_procedure_data IS
        SELECT 
            '{"ID":' || ID || ',"USER_ID":' || USER_ID || ',"ACTOR_ID":"' || ACTOR_ID || '","REASON":"' || REASON || '","FORMS":"' || FORMS || '","ATTACHMENTS":"' || ATTACHMENTS || '","MULTIMEDIA_ID":"' || MULTIMEDIA_ID ||'","STATUS":"' || STATUS || '","DATE_APPROVED":"' || DATE_APPROVED || '","CREATED_AT":"' || CREATED_AT || '","UPDATED_AT":"' || UPDATED_AT || '"}' as json_record
        FROM PROCEDURE_DATA;

BEGIN
    SELECT COUNT(*) INTO l_count
    FROM PROCEDURE_DATA;

    FOR r in c_procedure_data LOOP
        IF l_row_check + 1 >= start_position AND l_row_check + 1 <= end_position THEN
            l_json_record := r.json_record;

            l_result_size := DBMS_LOB.GETLENGTH(l_result1 || l_result2 || l_json_record || '}');

            IF l_result_size > 10000 THEN
                EXIT;
            ELSE
                -- Agregar coma si no es el primer registro
                IF l_row_check != 0 THEN
                    l_result2 := l_result2 || ', ';
                END IF;
                l_result2 := l_result2 || l_json_record;
                l_row_check := l_row_check + 1;
            END IF;
        END IF;
    END LOOP;
    
    l_result1 := '{ "count": ' || TO_CHAR(l_count) ||  ',"rows": ' || TO_CHAR(l_row_check) || ', "data": [';  -- Cambiado para que la data esté entre corchetes

    l_result3 := l_result1 || l_result2 || ']}';

    RETURN l_result3;
END;

FUNCTION OBTENER_TRAM_DATA_ID(procedure_id IN NUMBER) 
RETURN CLOB AS
    l_result CLOB;
BEGIN
    SELECT '[' ||
           LISTAGG('{ "ID":" ' || ID || '", "USER_ID":" ' || USER_ID || '", "ACTOR_ID": "' || ACTOR_ID || '", "REASON": "' || REASON || '", "FORMS": "' || FORMS || '", "ATTACHMENTS": "' || ATTACHMENTS || '", "MULTIMEDIA_ID": "' || MULTIMEDIA_ID || '", "STATUS": "' || STATUS || '", "DATE_APPROVED": "' || DATE_APPROVED || '", "CREATED_AT": "' || CREATED_AT || '", "UPDATED_AT": "' || UPDATED_AT || '" }', ', ') WITHIN GROUP (ORDER BY ID) ||
           ']' INTO l_result
    FROM PROCEDURE_DATA WHERE ID = procedure_id;

    IF l_result IS NULL THEN
        l_result := '[]'; -- Return an empty JSON array if no rows were found
    END IF;

    RETURN l_result;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
        RETURN NULL; -- Return NULL on error
END;

FUNCTION OBTENER_TRAM_DATA_UNIT_ID (procedure_unit_id IN NUMBER)
RETURN CLOB AS
    l_result CLOB;
BEGIN
    SELECT '[' ||
           LISTAGG('{ "ID": ' || ID || ', "USER_ID": ' || USER_ID || ', "ACTOR_ID": "' || ACTOR_ID || '", "REASON": "' || REASON || '", "FORMS": "' || FORMS || '", "ATTACHMENTS": "' || ATTACHMENTS || '", "MULTIMEDIA_ID": "' || MULTIMEDIA_ID || '", "STATUS": "' || STATUS || '", "DATE_APPROVED": "' || DATE_APPROVED || '", "CREATED_AT": "' || CREATED_AT || '", "UPDATED_AT": "' || UPDATED_AT || '" }', ', ') WITHIN GROUP (ORDER BY ID) ||
           ']' INTO l_result
    FROM PROCEDURE_DATA WHERE PROCEDURE_UNITS_ID = procedure_unit_id;

    IF l_result IS NULL THEN
        l_result := '[]'; -- Return an empty JSON array if no rows were found
    END IF;

    RETURN l_result;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error inesperado: ' || SQLERRM);
        RETURN NULL; -- Return NULL on error
END;


/*
FUNCTION OBTENER_TRAM_DATA_USER(user_id IN NUMBER) 
RETURN CLOB
IS
    l_result CLOB;
    l_temp SYS_REFCURSOR;
    l_row PROCEDURE_DATA%ROWTYPE;
BEGIN
    OPEN l_temp FOR 
        'SELECT ID, USER_ID, PROCEDURE_UNITS_ID, ACTOR_ID, REASON, FORMS, ATTACHMENTS, MULTIMEDIA_ID, STATUS, DATE_APPROVED, CREATED_AT, UPDATED_AT FROM PROCEDURE_DATA WHERE USER_ID = :user_id' USING user_id;

    l_result := '[ ';

    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;

        l_result := l_result || '{"ID":' || l_row.ID || ', "USER_ID":' || l_row.USER_ID || ', "PROCEDURE_UNITS_ID":' || l_row.PROCEDURE_UNITS_ID ||  ', "ACTOR_ID":"' || l_row.ACTOR_ID || '", "REASON":"' || l_row.REASON || '", "FORMS":"' || l_row.FORMS || '", "ATTACHMENTS":"' || l_row.ATTACHMENTS ||'", "MULTIMEDIA_ID":"' || l_row.MULTIMEDIA_ID || '", "STATUS":"' || l_row.STATUS || '", "DATE_APPROVED":"' || l_row.DATE_APPROVED || '", "CREATED_AT":"' || l_row.CREATED_AT || '", "UPDATED_AT":"' || l_row.UPDATED_AT || '"},';
    END LOOP;

    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;

    l_result := RTRIM(l_result, ', ') || ' ]';

    RETURN l_result;

END;*/


FUNCTION OBTENER_TRAM_DATA_USER(
    p_user_id IN NUMBER,
    start_position IN NUMBER,
    end_position IN NUMBER
)
RETURN CLOB
IS
    l_result1 CLOB;
    l_result2 CLOB := '';  -- Inicializa l_result2 para almacenar registros individuales
    l_result3 CLOB;
    l_result_size NUMBER;
    l_count  NUMBER;
    l_row_check NUMBER := 0;
    l_json_record VARCHAR2(4000); -- Para almacenar el registro individual como JSON


    CURSOR c_procedure_data IS
        SELECT 
            '{"ID":' || ID || ',"USER_ID":' || USER_ID || ',"PROCEDURE_UNITS_ID":' || PROCEDURE_UNITS_ID ||  ',"ACTOR_ID":"' || ACTOR_ID || '","REASON":"' || REASON || '","FORMS":"' || FORMS || '","ATTACHMENTS":"' || ATTACHMENTS || '","MULTIMEDIA_ID":"' || MULTIMEDIA_ID ||'","STATUS":"' || STATUS || '","DATE_APPROVED":"' || DATE_APPROVED || '","CREATED_AT":"' || CREATED_AT || '","UPDATED_AT":"' || UPDATED_AT || '"}' as json_record
        FROM PROCEDURE_DATA
        WHERE USER_ID = p_user_id;

BEGIN
    SELECT COUNT(*) INTO l_count
    FROM PROCEDURE_DATA
    WHERE USER_ID = p_user_id;

    FOR r in c_procedure_data LOOP
        IF l_row_check + 1 >= start_position AND l_row_check + 1 <= end_position THEN
            l_json_record := r.json_record;

            l_result_size := DBMS_LOB.GETLENGTH(l_result1 || l_result2 || l_json_record || '}');

            IF l_result_size > 10000 THEN
                EXIT;
            ELSE
                -- Agregar coma si no es el primer registro
                IF l_row_check != 0 THEN
                    l_result2 := l_result2 || ', ';
                END IF;
                l_result2 := l_result2 || l_json_record;
                l_row_check := l_row_check + 1;
            END IF;
        END IF;
    END LOOP;
    
    l_result1 := '{ "count": ' || TO_CHAR(l_count) ||  ',"rows": ' || TO_CHAR(l_row_check) || ', "data": [';  -- Cambiado para que la data esté entre corchetes

    l_result3 := l_result1 || l_result2 || ']}';

    RETURN l_result3;
END;


FUNCTION OBTENER_ULT_TRAM_DATA_USER (user_id IN NUMBER)
RETURN CLOB
IS
    l_result CLOB;
    l_temp SYS_REFCURSOR;
    l_row PROCEDURE_DATA%ROWTYPE;
BEGIN
    OPEN l_temp FOR 
        'SELECT ID, USER_ID, PROCEDURE_UNITS_ID, ACTOR_ID, REASON, FORMS, ATTACHMENTS, MULTIMEDIA_ID, STATUS, DATE_APPROVED, CREATED_AT, UPDATED_AT FROM (SELECT * FROM PROCEDURE_DATA WHERE USER_ID = ' || user_id || ' ORDER BY CREATED_AT DESC) WHERE ROWNUM = 1';

    l_result := '[ ';

    LOOP
        FETCH l_temp INTO l_row;
        EXIT WHEN l_temp%NOTFOUND;

        l_result := l_result || '{"ID":"' || l_row.ID || '", "USER_ID":"' || l_row.USER_ID || '", "PROCEDURE_UNITS_ID":' || l_row.PROCEDURE_UNITS_ID ||  ', "ACTOR_ID":"' || l_row.ACTOR_ID || '", "REASON":"' || l_row.REASON || '", "FORMS":"' || l_row.FORMS || '", "ATTACHMENTS":"' || l_row.ATTACHMENTS || '", "MULTIMEDIA_ID":"' || l_row.MULTIMEDIA_ID ||'", "STATUS":"' || l_row.STATUS || '", "DATE_APPROVED":"' || l_row.DATE_APPROVED || '", "CREATED_AT":"' || l_row.CREATED_AT || '", "UPDATED_AT":"' || l_row.UPDATED_AT || '"},';
    END LOOP;

    IF l_temp%ISOPEN THEN
        CLOSE l_temp;
    END IF;

    l_result := RTRIM(l_result, ', ') || ' ]';

    RETURN l_result;

END;

-----


--- insertar datos

FUNCTION CREAR_TRAMITE_DATA(
    p_user_id IN NUMBER,
    p_procedure_unit_id IN NUMBER
) RETURN BOOLEAN
AS
BEGIN
    EXECUTE IMMEDIATE 'INSERT INTO PROCEDURE_DATA (USER_ID, PROCEDURE_UNITS_ID, STATUS)  VALUES (:p_user_id, :p_procedure_unit_id, ''INICIADO'')'
    USING p_user_id, p_procedure_unit_id;
RETURN TRUE;
EXCEPTION
  WHEN OTHERS THEN
    RETURN FALSE;
END;


-----


--- actualizar datos

FUNCTION ACTUALIZAR_TRAMITE_DATA(
    p_id IN PROCEDURE_DATA.ID%TYPE,
    p_user_id IN PROCEDURE_DATA.USER_ID%TYPE,
    p_actor_id IN PROCEDURE_DATA.ACTOR_ID%TYPE,
    p_reason IN PROCEDURE_DATA.REASON%TYPE,
    p_forms IN PROCEDURE_DATA.FORMS%TYPE,
    p_attachments IN PROCEDURE_DATA.ATTACHMENTS%TYPE,
    p_status IN PROCEDURE_DATA.STATUS%TYPE,
    p_date_approved IN PROCEDURE_DATA.DATE_APPROVED%TYPE
)RETURN BOOLEAN
IS
    v_success BOOLEAN := FALSE;
BEGIN
    UPDATE PROCEDURE_DATA SET 
        USER_ID = p_user_id, 
        ACTOR_ID = p_actor_id, 
        REASON = p_reason,
        FORMS = p_forms, 
        ATTACHMENTS = p_attachments, 
        STATUS = p_status, 
        DATE_APPROVED = p_date_approved
    WHERE ID = p_id;

    IF SQL%ROWCOUNT = 1 THEN
        v_success := TRUE;
    END IF;

    RETURN v_success;
EXCEPTION
    WHEN OTHERS THEN
        RETURN FALSE;
END;

----------------------------------------------------------------------------------------------------------

--INSERTAR ADJUNTO DE FORM_DATA
PROCEDURE FORM_DATA_ADJUNTO(
  p_file BLOB,
  file_type VARCHAR2,
  file_extension VARCHAR2,
  form_data_table_id NUMBER,
  file_name VARCHAR2,
  P_multimedia_id OUT NUMBER
) AS
  multimedia_id NUMBER;

BEGIN
  -- Insertar archivo multimedia y obtener el ID
  MULTIMEDIA.MMD_UTILIDADES_DGIN.MULTIMEDIA_INSERTA_ARCHIVO(
    'CIUDADANOS',
    'NOTIFICATIONS_DOC',
    file_type,
    file_extension,
    form_data_table_id,
    file_name,
    p_file,
    multimedia_id
  );
  
    P_multimedia_id := multimedia_id;

    -- Actualizar la columna MULTIMEDIA_ID en la tabla FORMS_DATA
   UPDATE CIUDADANOS.FORMS_DATA
    SET MULTIMEDIA_ID = CASE 
                            WHEN MULTIMEDIA_ID IS NULL THEN TO_CHAR(P_multimedia_id)
                            ELSE COALESCE(MULTIMEDIA_ID || ',', '') || TO_CHAR(P_multimedia_id)
                       END
    WHERE ID = form_data_table_id;
    
    -- Actualizar la columna ATTACHMENTS en la tabla FORMS_DATA
    UPDATE CIUDADANOS.FORMS_DATA
    SET ATTACHMENTS = CASE 
                        WHEN ATTACHMENTS IS NULL THEN file_name
                        ELSE COALESCE(ATTACHMENTS || ',', '') || file_name
                     END
    WHERE ID = form_data_table_id;
  
END;



FUNCTION FORMS_DATA_BORRAR_ADJUNTO (p_multimedia_id IN NUMBER) 
RETURN NUMBER
AS
    result NUMBER(10);
BEGIN
    BEGIN
        result := MULTIMEDIA.MMD_UTILIDADES_DGIN.MULTIMEDIA_BORRA('NOTIFICATIONS_DOC', p_multimedia_id);
        RETURN result;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            -- Manejar la excepción cuando no se encuentra ningún dato y devolver un valor predeterminado, como -1
            RETURN -1;
        WHEN OTHERS THEN
            -- Manejar cualquier otra excepción y devolver 0 en caso de error
            RETURN 0;
    END;
END;


--INSERTAR ADJUNTO DE FORM_DATA
PROCEDURE PROCEDURE_DATA_ADJUNTO(
  p_file BLOB,
  file_type VARCHAR2,
  file_extension VARCHAR2,
  procedure_data_table_id NUMBER,
  file_name VARCHAR2,
  P_multimedia_id OUT NUMBER
) AS
  multimedia_id NUMBER;

BEGIN
  -- Insertar archivo multimedia y obtener el ID
  MULTIMEDIA.MMD_UTILIDADES_DGIN.MULTIMEDIA_INSERTA_ARCHIVO(
    'CIUDADANOS',
    'NOTIFICATIONS_DOC',
    file_type,
    file_extension,
    procedure_data_table_id,
    file_name,
    p_file,
    multimedia_id
  );
  
    P_multimedia_id := multimedia_id;

    -- Actualizar la columna MULTIMEDIA_ID en la tabla FORMS_DATA
   UPDATE CIUDADANOS.PROCEDURE_DATA
    SET MULTIMEDIA_ID = CASE 
                            WHEN MULTIMEDIA_ID IS NULL THEN TO_CHAR(P_multimedia_id)
                            ELSE COALESCE(MULTIMEDIA_ID || ',', '') || TO_CHAR(P_multimedia_id)
                       END
    WHERE ID = procedure_data_table_id;

  -- Actualizar la columna ATTACHMENTS en la tabla FORMS_DATA
    UPDATE CIUDADANOS.PROCEDURE_DATA
    SET ATTACHMENTS = CASE 
                        WHEN ATTACHMENTS IS NULL THEN file_name
                        ELSE COALESCE(ATTACHMENTS || ',', '') || file_name
                     END
    WHERE ID = procedure_data_table_id;
    
END;

FUNCTION PROCEDURE_DATA_BORRAR_ADJUNTO (p_multimedia_id IN NUMBER) 
RETURN NUMBER
AS
    result NUMBER(10);
BEGIN
    BEGIN
        result := MULTIMEDIA.MMD_UTILIDADES_DGIN.MULTIMEDIA_BORRA('NOTIFICATIONS_DOC', p_multimedia_id);
        RETURN result;
    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            -- Manejar la excepción cuando no se encuentra ningún dato y devolver un valor predeterminado, como -1
            RETURN -1;
        WHEN OTHERS THEN
            -- Manejar cualquier otra excepción y devolver 0 en caso de error
            RETURN 0;
    END;
END;

FUNCTION DELETE_PROCEDURE_MULTIMEDIA (
    p_attachments IN VARCHAR2,
    p_multimedia_id IN VARCHAR2,
    p_id IN NUMBER
) RETURN NUMBER AS
BEGIN
    -- Verificar si p_multimedia_id o p_attachments son cadenas vacías
    IF p_multimedia_id = '' OR p_attachments = '' THEN
        -- Borrar los campos ATTACHMENTS y MULTIMEDIA_ID si alguno es una cadena vacía
        UPDATE PROCEDURE_DATA
        SET ATTACHMENTS = NULL, -- Cambia a NULL para borrar
            MULTIMEDIA_ID = NULL -- Cambia a NULL para borrar
        WHERE ID = p_id; -- Debes proporcionar una condición adecuada para identificar el registro a actualizar
    ELSE
        -- Actualizar los campos ATTACHMENTS y MULTIMEDIA_ID en la tabla PROCEDURE_DATA
        UPDATE PROCEDURE_DATA
        SET ATTACHMENTS = p_attachments,
            MULTIMEDIA_ID = p_multimedia_id
        WHERE ID = p_id; -- Debes proporcionar una condición adecuada para identificar el registro a actualizar
    END IF;
    
   
    RETURN 1; -- Indica que la actualización fue exitosa
    
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RETURN -1; -- Indica un error en caso de excepción
END;

FUNCTION DELETE_FORMS_MULTIMEDIA (
    p_attachments IN VARCHAR2,
    p_multimedia_id IN VARCHAR2,
    p_id IN NUMBER
) RETURN NUMBER AS
BEGIN
    -- Verificar si p_multimedia_id o p_attachments son cadenas vacías
    IF p_multimedia_id = '' OR p_attachments = '' THEN
        -- Borrar los campos ATTACHMENTS y MULTIMEDIA_ID si alguno es una cadena vacía
        UPDATE FORMS_DATA
        SET ATTACHMENTS = NULL, -- Cambia a NULL para borrar
            MULTIMEDIA_ID = NULL -- Cambia a NULL para borrar
        WHERE ID = p_id; -- Debes proporcionar una condición adecuada para identificar el registro a actualizar
    ELSE
        -- Actualizar los campos ATTACHMENTS y MULTIMEDIA_ID en la tabla PROCEDURE_DATA
        UPDATE FORMS_DATA
        SET ATTACHMENTS = p_attachments,
            MULTIMEDIA_ID = p_multimedia_id
        WHERE ID = p_id; -- Debes proporcionar una condición adecuada para identificar el registro a actualizar
    END IF;
    
   
    RETURN 1; -- Indica que la actualización fue exitosa
    
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RETURN -1; -- Indica un error en caso de excepción
END;

END CIUD_TRAMITES_DATA_PKG;